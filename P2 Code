import numpy as np
import cv2
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
%matplotlib inline
%matplotlib qt
import glob


#Read in and make a list of calibration image

images = glob.glob('C:\\Users\Atilla\Jupyter\Project 2 - Advanced Lane Finding\camera_cal\calibration**.jpg')

#Arrays to store object points and image points from all the images
objpoints = [] # 3D points in real world space
imgpoints = [] # 2D points in image plane

# Prepare object points, like (0,0,0), (1,0,0) .... , (9,6,0)
objp = np.zeros((9*6,3),np.float32)
objp[:,:2] = np.mgrid[0:9,0:6].T.reshape(-1,2)   #x, y coordinates

for fname in images:
    #read in each image
    img =mpimg.imread(fname)

    # Convert to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # prepare object points
    nx = 9 #number of inside corners in x
    ny = 6 #number of inside corners in y

    # Find the chessboard corners
    ret, corners = cv2.findChessboardCorners(gray, (nx, ny), None)

    # If corners are found, add object points, image points
    if ret == True:
        imgpoints.append(corners)
        objpoints.append(objp)
        
        #draw and display the corners
        imgChboCor = cv2.drawChessboardCorners(img, (nx, ny), corners, ret)
        

        ret, mtx, dist, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)
        undist = cv2.undistort(img, mtx, dist, None, mtx)
        
        plt.imshow(undist)
        
print(mtx)
print(dist)
